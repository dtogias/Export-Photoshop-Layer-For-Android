/** * Export for Android Photoshop Script * * Author: Rich Freedman (greybeardedgeek.net) * GitHub: https://github.com/rfreedman * Twitter: @greybeardedgeek * * This script started as the 'Export for iOS' script, found at http://pastebin.com/12dHWYm8, * and originally authored by Daniel Wood ( twitter: @loadedwino ) * * I modified the iOS script to instead export the appropriate image sizes for Android. * * This script is intended to be used on a photoshop document containing mdpi * artwork for Android. It will resize, trim and save the selected layer or group, into a * directory you select using the layer name (normalised) for the file name. There are a * couple of resizing options you can select such as the * resizing method and whether to scale styles or not. It does not alter your original * document in anyway. * * Images are saved to 'drawable-ldpi', 'drawable-mdpi', 'drawable-hdpi', and 'drawable-xhdpi' * directories under the selected output directory. If these directories do not exist, * the script will create them. * * Original 'license': * Feel free to share/reuse/modify to your heart's content. * Attribution would be nice but is not required. */// Enable double clicking from the Macintosh Finder or the Windows Explorer#target photoshop// Includes#include "stdlib.js"// Constantsvar ResizeMethod = {    NEARESTNEIGHBOUR: {name: 'Nearest Neighbour', value: 'Nrst'},    BILINEAR: {name: 'Bilinear', value: 'Blnr'},    BICUBIC: {name: 'Bicubic', value: 'Bcbc'},    BICUBICSMOOTHER: {name: 'Bicubic Smoother', value: 'bicubicSmoother'},    BICUBICSHARPER: {name: 'Bicubic Sharper', value: 'bicubicSharper'}};var EXPORT_TYPE_PNG = 0;var EXPORT_TYPE_JPG = 1;var resizeMethodLookup = {};resizeMethodLookup[ResizeMethod.NEARESTNEIGHBOUR.name] = ResizeMethod.NEARESTNEIGHBOUR.value;resizeMethodLookup[ResizeMethod.BILINEAR.name] = ResizeMethod.BILINEAR.value;resizeMethodLookup[ResizeMethod.BICUBIC.name] = ResizeMethod.BICUBIC.value;resizeMethodLookup[ResizeMethod.BICUBICSMOOTHER.name] = ResizeMethod.BICUBICSMOOTHER.value;resizeMethodLookup[ResizeMethod.BICUBICSHARPER.name] = ResizeMethod.BICUBICSHARPER.value;var exportDialog;///////////////////////////////////////////////////////////////////////////////function saveForWeb(width, exportOptions, folderName, dupDoc){	resizeImage(UnitValue(width, "px"), exportOptions.resizeMethod, exportOptions.scaleStyles);	outputFolder = Folder(folderName);	if(!outputFolder.exists)		outputFolder.create();	exportOptions.saveOptions = new ExportOptionsSaveForWeb();	if (exportOptions.type == EXPORT_TYPE_JPG) { //JPG		exportOptions.saveOptions.format = SaveDocumentType.JPEG;		exportOptions.saveOptions.quality = 100;		exportOptions.saveOptions.includeProfile = false;		exportOptions.saveOptions.interlaced = 0;		exportOptions.saveOptions.optimized = true;	}	else { //PNG		exportOptions.saveOptions.format = SaveDocumentType.PNG;		exportOptions.saveOptions.PNG8 = false;		exportOptions.saveOptions.quality = 100;	}	saveFile(dupDoc, outputFolder.fullName, exportOptions);}///////////////////////////////////////////////////////////////////////////////function saveFile(doc, outputFolderStr, exportOptions){	var file;	if (exportOptions.name.length > 27) {	    file = new File(outputFolderStr + "/temp" + exportOptions.extension);	    doc.exportDocument(file, ExportType.SAVEFORWEB, exportOptions.saveOptions);	    file.rename(exportOptions.name + exportOptions.extension);	}	else {	    file = new File(outputFolderStr + "/" + exportOptions.name + exportOptions.extension);	    doc.exportDocument(file, ExportType.SAVEFORWEB, exportOptions.saveOptions);	}}///////////////////////////////////////////////////////////////////////////////function resizeImage(width, method, scaleStyles){    var action = new ActionDescriptor();    action.putUnitDouble( charIDToTypeID("Wdth"), charIDToTypeID("#Pxl"), width );    if(scaleStyles == true)        action.putBoolean( stringIDToTypeID("scaleStyles"), true );    action.putBoolean( charIDToTypeID("CnsP"), true );    action.putEnumerated( charIDToTypeID("Intr"), charIDToTypeID("Intp"), charIDToTypeID(method) );    executeAction( charIDToTypeID("ImgS"), action, DialogModes.NO );}///////////////////////////////////////////////////////////////////////////////function exportImages(baseName, exportOptions){    // select a folder to save to    var folder = Folder.selectDialog();    if(!folder)    	return;    // Save original units    var originalRulerUnits = app.preferences.rulerUnits ;    var originalTypeUnits = app.preferences.typeUnits ;    app.preferences.rulerUnits=Units.PIXELS;    app.preferences.typeUnits=TypeUnits.PIXELS;    // get currect document    var doc = app.activeDocument;    // create new document based on the current docs values except name which user    var dup = app.documents.add(doc.width, doc.height, doc.resolution, baseName, NewDocumentMode.RGB, DocumentFill.TRANSPARENT);    // switch back to origal doc to allow duplicate    app.activeDocument = doc;    // duplicate the selected layer (only works for one) and place it in the new doc    doc.activeLayer.duplicate(dup);    // switch back to the new document    app.activeDocument = dup;    //trim document    trimDocument(dup);    // adjust canvas size so that it is an even number of pixels (so scaling down fits on whole pixel)    //  NOTE: size should be divided by 2    // dup.resizeCanvas(Math.ceil(dup.width/2)*2, Math.ceil(dup.height/2)*2, AnchorPosition.TOPLEFT);    // normalise name (basic normalisation lower case and hyphenated, modify or remove to taste)    var normalisedName = dup.name.toLowerCase().replace(' ', '-');    if (normalisedName.endsWith(".jpg") == true) {        exportOptions.type = EXPORT_TYPE_JPG;        exportOptions.extension = ".jpg";        exportOptions.name = normalisedName.substr (0, normalisedName.length - 4);    }    else if (normalisedName.endsWith(".jpeg") == true) {	    exportOptions.type = EXPORT_TYPE_JPG;	    exportOptions.extension = ".jpg";	    exportOptions.name = normalisedName.substr (0, normalisedName.length - 5);    }    else if (normalisedName.endsWith(".png") == true) {    	exportOptions.type = EXPORT_TYPE_PNG;    	exportOptions.extension = ".png";        exportOptions.name = normalisedName.substr (0, normalisedName.length - 4);    }    else {    	exportOptions.type = EXPORT_TYPE_PNG;    	exportOptions.extension = ".png";        exportOptions.name = normalisedName;    }    // we assume that the original image is at mdpi size, so we'll scale as needed from there    var mdpiWidth = dup.width;    var hdpiWidth = mdpiWidth * 1.5;    var xhdpiWidth = mdpiWidth * 2;    var xxhdpiWidth = mdpiWidth * 3;    saveForWeb(mdpiWidth, exportOptions, folder.fullName + '/drawable-mdpi',  dup);    saveForWeb(hdpiWidth, exportOptions, folder.fullName + '/drawable-hdpi', dup);    saveForWeb(xhdpiWidth, exportOptions, folder.fullName + '/drawable-xhdpi', dup);    saveForWeb(xxhdpiWidth, exportOptions, folder.fullName + '/drawable-xxhdpi', dup);    dup.close(SaveOptions.DONOTSAVECHANGES);    app.preferences.rulerUnits=originalRulerUnits;    app.preferences.typeUnits=originalTypeUnits;}///////////////////////////////////////////////////////////////////////////////function trimDocument(docRef){	var activeLayerRef = docRef.activeLayer;	//Layer - Mask	// if (hasLayerMask() == true && isLayerMaskEnabled()) {	//     docRef.pathItems[0].makeSelection();	//     docRef.crop(docRef.selection.bounds);	// }	// //Layer - Vector Mask	// if (hasVectorMask() == true  && isVectorMaskEnabled()) {	//     //TODO: ADD CODE HERE	// }	// var pathItemsCount = docRef.pathItems.length;	// if (pathItemsCount > 0) {	//     docRef.pathItems[0].makeSelection();	//     docRef.crop(docRef.selection.bounds);	// }    //trim to layer mask for layer groups    if (activeLayerRef.typename == "LayerSet") {        try {            var boundsLayerRef = activeLayerRef.layers.getByName("@bounds");        	var oldActiveLayerRef = activeLayerRef;        	docRef.activeLayer = boundsLayerRef;        	//BOUNDS Layer - Vector Mask        	var pathItemsCount = docRef.pathItems.length;        	if (pathItemsCount > 0) {        	    docRef.pathItems[0].makeSelection();        	    docRef.crop(docRef.selection.bounds);        	    boundsLayerRef.visible = false;        	}        	//BOUNDS Layer - Channel Mask        	docRef.activeLayer = oldActiveLayerRef;        	return;        }        catch (e) {}    }	//default: trim the document so that all that appears is our element	docRef.trim(TrimType.TRANSPARENT);}///////////////////////////////////////////////////////////////////////////////function isLayerMaskEnabled(){    var ref = new ActionReference();    var keyUserMaskEnabled = app.charIDToTypeID( 'UsrM' );    ref.putEnumerated( app.charIDToTypeID( 'Lyr ' ), app.charIDToTypeID( 'Ordn' ), app.charIDToTypeID( 'Trgt' ) );    var desc = executeActionGet( ref );    //debugActions( "isLayerMaskEnabled", desc );    return (desc.hasKey(keyUserMaskEnabled) && desc.getBoolean(keyUserMaskEnabled));};///////////////////////////////////////////////////////////////////////////////// NOTE: this function is not correctfunction isVectorMaskEnabled(){    var ref = new ActionReference();    var keyVectorMaskEnabled = app.stringIDToTypeID( 'hasVectorMask' );    ref.putProperty( app.charIDToTypeID( 'Prpr' ), keyVectorMaskEnabled );    ref.putEnumerated( app.charIDToTypeID( 'Lyr ' ), app.charIDToTypeID( 'Ordn' ), app.charIDToTypeID( 'Trgt' ) );    var desc = executeActionGet( ref );    //debugActions( "isVectorMaskEnabled", desc );    return (desc.hasKey(keyVectorMaskEnabled) && desc.getBoolean(keyVectorMaskEnabled));};///////////////////////////////////////////////////////////////////////////////function hasLayerMask(){    var hasLayerMask = false;    try {        var ref = new ActionReference();        var keyUserMaskEnabled = app.charIDToTypeID( 'UsrM' );        ref.putProperty( app.charIDToTypeID( 'Prpr' ), keyUserMaskEnabled );        ref.putEnumerated( app.charIDToTypeID( 'Lyr ' ), app.charIDToTypeID( 'Ordn' ), app.charIDToTypeID( 'Trgt' ) );        var desc = executeActionGet( ref );        //debugActions( "hasLayerMask", desc );        if ( desc.hasKey( keyUserMaskEnabled ) )            hasLayerMask = true;    }    catch(e) {}    return hasLayerMask;}///////////////////////////////////////////////////////////////////////////////function hasVectorMask(){    var ref = new ActionReference();    var keyVectorMaskEnabled = app.stringIDToTypeID( 'hasVectorMask' );    ref.putProperty( app.charIDToTypeID( 'Prpr' ), keyVectorMaskEnabled );    ref.putEnumerated( app.charIDToTypeID( 'Lyr ' ), app.charIDToTypeID( 'Ordn' ), app.charIDToTypeID( 'Trgt' ) );    var desc = executeActionGet( ref );    //debugActions( "hasVectorMask", desc );    return (desc.getBoolean(keyVectorMaskEnabled));}///////////////////////////////////////////////////////////////////////////////function okClickedHandler(){	var exportOptions = new Object();    exportOptions.resizeMethod = resizeMethodLookup[exportDialog.methodOptions.selection.text];    exportOptions.scaleStyles = exportDialog.scaleStylesCheckBox.value;    var baseName = exportDialog.namePanel.nameBox.text;    exportDialog.close();    exportImages(baseName, exportOptions);}exportDialog = new Window('dialog', 'Export Selected Layer for Android');exportDialog.alignChildren = 'left';exportDialog.namePanel = exportDialog.add('panel', undefined, 'Base name');exportDialog.namePanel.alignChildren = 'left';var doc = app.activeDocument;var defaultName = doc.activeLayer.name;exportDialog.namePanel.nameBox = exportDialog.namePanel.add('edittext', undefined, 'Name');exportDialog.namePanel.nameBox.preferredSize = [160,20];exportDialog.namePanel.nameBox.text = defaultName;exportDialog.methodOptions = exportDialog.add('dropdownlist', undefined, [ResizeMethod.NEARESTNEIGHBOUR.name, ResizeMethod.BILINEAR.name, ResizeMethod.BICUBIC.name, ResizeMethod.BICUBICSMOOTHER.name, ResizeMethod.BICUBICSHARPER.name]);exportDialog.methodOptions.children[1].selected = true;exportDialog.scaleStylesCheckBox = exportDialog.add('checkbox', undefined, 'Scale Styles');exportDialog.scaleStylesCheckBox.value = false;exportDialog.buttonGroup = exportDialog.add('group');exportDialog.buttonGroup.cancelButton = exportDialog.buttonGroup.add('button', undefined, 'Cancel');exportDialog.buttonGroup.okButton = exportDialog.buttonGroup.add('button', undefined, 'OK');exportDialog.buttonGroup.okButton.addEventListener('click', okClickedHandler);exportDialog.show();